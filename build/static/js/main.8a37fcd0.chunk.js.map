{"version":3,"sources":["components/Settings.jsx","components/NavBar.jsx","components/Monitor.jsx","api.js","App.jsx","serviceWorker.js","index.js"],"names":["Settings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","modal","state","renderContent","_React$createElement","baseUrl","appStates","handleUpdateUrl","appFunctions","newUrl","react_default","a","createElement","reactstrap_es","className","type","placeholder","onChange","e","target","value","defineProperty","renderModal","onClick","fade","isOpen","size","Component","NavBar","renderSelectedWindow","_this$props","window","content","currentWindow","MONITOR","SETTINGS","renderWindowButton","newWindowValue","displayText","handleWindowChange","isDisabled","renderOptions","_this$props2","navbar","components_Settings","href","toggleNavbar","bind","assertThisInitialized","collapsed","style","fontSize","color","Monitor","handleFiltering","node","filter","ip_address","includes","name","details","state_string","config_time","renderTableRows","nodes","map","i","key","renderTable","tableHeaderClass","hover","responsive","renderOfflineWarning","online","renderTablePainel","tableName","filteredNodes","length","_this$props$appStates","fDefault","res","console","log","App","loadData","_ref","asyncToGenerator","regenerator_default","mark","_callee","app","wrap","_context","prev","next","url","fThen","response","data","fCatch","axios","get","then","catch","stop","_x","apply","arguments","newWindow","VALID_NUMS","newBaseUrl","handleDisplaySettings","prevState","showSettings","renderWindow","components_Monitor","appProps","refreshInterval","intervalId","setInterval","clearInterval","components_NavBar","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a37fcd0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            newUrl: '',\n            modal: false\n        }\n    }\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n    \n    renderContent = () => {\n        const { baseUrl } = this.props.appStates;\n        const { handleUpdateUrl } = this.props.appFunctions;\n        const { newUrl } = this.state;\n\n        return <div>\n            <ModalBody>\n                <form>\n                    <div className='form-group row'>\n                        <div className='col-md-4'>\n                            <label\n                                className='m-2'>Server url: {baseUrl}\n                            </label>\n                        </div>\n                        <div className='col-md-4'>\n                            <input\n                                className='m-2'\n                                type='text'\n                                placeholder={baseUrl}\n                                onChange={e => this.setState({ newUrl: e.target.value })} />\n                        </div>\n                        <div className='col-md-4'>\n                            <button\n                                className='m-2'\n                                type='button'\n                                className='btn btn-primary'\n                                onClick={() => handleUpdateUrl(newUrl)}\n                            >\n                                Save\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </ModalBody>\n          </div>\n    }\n    renderModal = () => {\n        return <div>\n            <Button onClick={this.toggle}>General Settings</Button>\n            <Modal \n                fade={false}\n                isOpen={this.state.modal}\n                toggle={this.toggle}\n                className={this.props.className}\n                size={'lg'}>\n                <ModalHeader \n                    toggle={this.toggle}>\n                    General Settings\n                </ModalHeader>\n                {this.renderContent()}\n            </Modal>\n        </div>\n    }\n\n    render() {\n        return (\n            <a>\n                {this.renderModal()}\n            </a>\n        );\n    }\n}\nexport default Settings;","import React, { Component } from \"react\";\nimport Settings from './Settings'\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Button\n} from \"reactstrap\";\n\nclass NavBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n        this.state = {\n            collapsed: true\n        };\n    }\n\n    toggleNavbar() {\n        this.setState({\n            collapsed: !this.state.collapsed\n        });\n    }\n\n    renderSelectedWindow = () => {\n        const {window, appStates} = this.props;\n        const {currentWindow} = appStates;\n\n        let content = \"Window Undefined\";\n\n        switch (currentWindow) { \n            case window.MONITOR:\n                content = \"Monitor Interface\";\n                break;\n            case window.SETTINGS:\n                content = \"Settings\";\n                break;\n            default:\n                break;\n        }\n\n        return <div className=\"ml-2 mr-5 NavBarText\">{content}</div>;\n    };\n\n    renderWindowButton = (newWindowValue, displayText) => {\n        const {currentWindow } = this.props.appStates;\n        const {handleWindowChange} = this.props.appFunctions;\n\n        const isDisabled = newWindowValue === currentWindow ? \"disabled\" : \"\";\n        return <Button onClick={() => handleWindowChange(newWindowValue)} className={\"m-2 \" + isDisabled} > {displayText}</Button>\n    };\n\n    renderOptions = () => {\n        const { window, appStates, appFunctions } = this.props;\n        return (\n            <Nav navbar>\n                <NavItem>\n                    {this.renderWindowButton(window.MONITOR, \"Monitor Interface\")}\n                </NavItem>\n                <NavItem>\n                    <Settings appStates={appStates} appFunctions={appFunctions}/>\n                </NavItem>\n                <NavItem>\n                    <NavLink href=\"https://github.com/lnls-sirius/bbb-daemon\">\n                        GitHub\n                    </NavLink>\n                </NavItem>\n            </Nav>\n        );\n    };\n\n    render() {\n        const {baseUrl} = this.props.appStates;\n        return (\n            <div>\n                <Navbar className=\"navbar navbar-dark bg-dark\">\n                    <NavbarBrand href=\"/\" className=\"mr-auto\">\n                        BeagleBone Daemon\n                    </NavbarBrand>\n                    <span className='ml-2 mr-2' style={{fontSize:18, color:'white'}}>\n                        {baseUrl}\n                    </span>\n                    {this.renderSelectedWindow()}\n                    <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n                    <Collapse isOpen={!this.state.collapsed} navbar >\n                        {this.renderOptions()}\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\nexport default NavBar;\n","import React, { Component } from 'react';\nimport { Table, Button } from 'reactstrap';\n\nclass Monitor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filter: ''\n        }\n    }\n\n\n    handleFiltering = (node) => {\n        const filter = this.state.filter;\n\n        return (\n            filter === null ||\n            filter === '' ||\n            node.ip_address.includes(filter) ||\n            node.name.includes(filter) ||\n            node.details.includes(filter) ||\n            node.state_string.includes(filter) ||\n            node.config_time.includes(filter)\n        )\n    }\n\n    renderTableRows = (nodes) => {\n        let rows = nodes\n            .map(function (node, i) {\n                return (\n                    <tr key={i}>\n                        <td>{node['ip_address']}</td>\n                        <td>{node['name']}</td>\n                        <td>{node['details']}</td>\n                        <td>{node['state_string']}</td>\n                        <td>{node['config_time']}</td>\n                        <td>\n                        </td>\n                        <td>\n                        </td>\n                    </tr>\n                )\n            }, this);\n        return rows;\n    };\n\n    renderTable = (tableHeaderClass, nodes) => {\n        return (<div>\n            <Table hover responsive>\n                <thead>\n                    <tr className={tableHeaderClass}>\n                        <th>IP</th>\n                        <th>Hostname</th>\n                        <th>Details</th>\n                        <th>State</th>\n                        <th>Config Time</th>\n                        <th></th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderTableRows(nodes)}\n                </tbody>\n            </Table>\n        </div>\n        );\n    };\n\n    renderOfflineWarning = () => {\n        const { online } = this.props.appStates;\n        if (!online)\n            return <span className=\"m-2 badge badge-danger\">Server Offline</span>\n    }\n\n    renderTablePainel = (tableName, filter, nodes, filteredNodes) => {\n        return <div>\n            {tableName}\n            <input\n                className=\"m-2\"\n                type=\"text\"\n                placeholder=\"Search Node\"\n                value={filter}\n                onChange={e => this.setState({ filter: e.target.value })} />\n            <a style={{ fontSize: 20 }}>\n                {this.renderOfflineWarning()}\n                <span className=\"m-2 badge badge-success\">Detected Nodes {nodes.length}</span>\n                <span className=\"m-2 badge badge-secondary\">Displayed Nodes {filteredNodes.length}</span>\n            </a>\n        </div>\n\n    };\n\n    render() {\n        const { filter, nodes } = this.props.appStates;\n        const filteredNodes = nodes.filter(this.handleFiltering);\n        let tableName = \"Connected Nodes\";\n        let tableHeaderClass = \"m-2 bg-primary text-white\";\n        return (\n            <div>\n                <div className=\"m-2\">\n                    {this.renderTablePainel(tableName, filter, nodes, filteredNodes)}\n                    {this.renderTable(tableHeaderClass, filteredNodes)}\n                </div>\n            </div>\n        );\n    };\n}\nexport default Monitor; \n","import axios from 'axios';\n\nfunction fDefault(res) {\n    console.log(res);\n}\n\nexport function getNodes(url, fThen, fCatch) {\n    if (fThen == null)\n        fThen = fDefault;\n    if (fCatch == null)\n        fCatch = fDefault\n\n    axios.get(url + '/nodes')\n        .then(fThen)\n        .catch(fCatch);\n}\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\n\nimport Monitor from \"./components/Monitor\";\n\nimport { getNodes, rebootNode } from './api.js';\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.window = {\n            VALID_NUMS: [0, 1],\n            MONITOR: 0,\n            SETTINGS: 1\n        };\n        this.state = {\n            currentWindow: this.window.MONITOR,\n            baseUrl: 'https://10.0.38.34/bbb-daemon/api',\n            refreshInterval: 1000,\n            showSettings: false,\n            nodes: [],\n            online: false\n        };\n    }\n\n    componentDidMount() {\n        const { refreshInterval } = this.state;\n        this.loadData(this);\n        this.intervalId = setInterval(this.loadData, refreshInterval, this);\n    }\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n\n    loadData = async (app) => {\n        // Make a request\n        getNodes(app.state.baseUrl,\n            (response) =>\n                app.setState({\n                    nodes: response.data,\n                    online: true\n                })\n            , (response) => app.setState({ online: false }));\n    }\n\n    handleWindowChange = (newWindow) => {\n        if (this.window.VALID_NUMS.includes(newWindow)\n            && this.currentWindow !== newWindow) {\n            this.setState({ currentWindow: newWindow })\n        }\n    };\n\n    handleUpdateUrl = (newBaseUrl) => {\n        this.setState({\n            baseUrl: newBaseUrl\n        });\n    }\n\n    handleDisplaySettings = () => {\n        this.setState((prevState, props) => {\n            return { showSettings: !(prevState.showSettings === true) };\n        });\n    }\n    \n    renderWindow = (currentWindow) => {\n        switch (currentWindow) {\n            case this.window.MONITOR:\n                return <Monitor\n                    appStates={this.state}\n                    appProps={this.props}\n                    appFunctions={{\n                        handleUpdateUrl: this.handleUpdateUrl,\n                        handleDisplaySettings: this.handleDisplaySettings,\n                        handleWindowChange: this.handleWindowChange,\n                    }} />;\n            default:\n                return <div className=\"m2\">Incorrect Window Value</div>;\n        }\n    };\n\n    render() {\n        const { currentWindow } = this.state;\n        return (\n            <div>\n                <div className=\"App\">\n                    <NavBar\n                        appStates={this.state}\n                        appProps={this.props}\n                        appFunctions={{\n                            handleUpdateUrl: this.handleUpdateUrl,\n                            handleDisplaySettings: this.handleDisplaySettings,\n                            handleWindowChange: this.handleWindowChange\n                        }}\n                        window={this.window} />\n                    <div className=\"AppBody\">\n                        {this.renderWindow(currentWindow)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}