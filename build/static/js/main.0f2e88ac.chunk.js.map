{"version":3,"sources":["components/Settings.jsx","components/NavBar.jsx","regex.js","components/Details.jsx","components/Monitor.jsx","api/node.js","App.jsx","serviceWorker.js","index.js"],"names":["Settings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","modal","state","renderContent","_React$createElement","baseUrl","appStates","handleUpdateUrl","appFunctions","newUrl","react_default","a","createElement","reactstrap_es","className","type","placeholder","onChange","e","target","value","defineProperty","renderModal","onClick","fade","isOpen","size","Component","NavBar","renderSelectedWindow","_this$props","window","content","currentWindow","MONITOR","SETTINGS","renderWindowButton","newWindowValue","displayText","handleWindowChange","isDisabled","renderOptions","_this$props2","navbar","components_Settings","href","toggleNavbar","bind","assertThisInitialized","collapsed","style","fontSize","color","reIpNetworkIp","reHostname","HostnameInp","handleInputChange","evt","newHostname","validInput","test","renderError","hostname","_this2","node","aria-label","aria-describedby","handleNewHostname","IpNetworkMaskInp","_this3","newIp","ip","_this4","handleNewIp","Details","_this5","success","newIpFailure","Details_HostnameInp","Details_IpNetworkMaskInp","centered","Monitor","handleFiltering","filter","re","RegExp","ip_address","name","details","state_string","config_time","ex","renderTableRows","nodes","map","i","key","handleReboot","components_Details","renderTable","tableHeaderClass","hover","responsive","renderOfflineWarning","online","renderTablePainel","tableName","filteredNodes","length","_this$props$appStates","fDefault","res","console","log","postNodeReboot","url","fThen","fCatch","axios","post","then","catch","App","loadData","_ref","asyncToGenerator","regenerator_default","mark","_callee","app","wrap","_context","prev","next","response","data","get","stop","_x","apply","arguments","newWindow","VALID_NUMS","includes","trim","postNodeHostname","new_ip_string","aux","split","ip_new","ip_network","ip_gateway","postNodeIpNetworkGateway","newBaseUrl","handleDisplaySettings","prevState","showSettings","renderWindow","components_Monitor","appProps","refreshInterval","intervalId","setInterval","clearInterval","components_NavBar","Boolean","location","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f2e88ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            newUrl: '',\n            modal: false\n        }\n    }\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    renderContent = () => {\n        const { baseUrl } = this.props.appStates;\n        const { handleUpdateUrl } = this.props.appFunctions;\n        const { newUrl } = this.state;\n\n        return <div>\n            <ModalBody>\n                <form>\n                    <div className='form-group row'>\n                        <div className='col-md-5'>\n                            <label> {baseUrl} </label>\n                        </div>\n                        <div className='col-md-5'>\n                            <input\n                                className='m-2'\n                                type='text'\n                                placeholder={baseUrl}\n                                onChange={e => this.setState({ newUrl: e.target.value })} />\n                        </div>\n                        <div className='col-md-2'>\n                            <button\n                                className='m-2'\n                                type='button'\n                                className='btn btn-primary'\n                                onClick={() => handleUpdateUrl(newUrl)}\n                            >\n                                Save\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </ModalBody>\n          </div>\n    }\n    renderModal = () => {\n        return <div>\n            <Button onClick={this.toggle}>General Settings</Button>\n            <Modal\n                fade={false}\n                isOpen={this.state.modal}\n                toggle={this.toggle}\n                className={this.props.className}\n                size={'lg'}>\n                <ModalHeader\n                    toggle={this.toggle}>\n                    General Settings\n                </ModalHeader>\n                {this.renderContent()}\n            </Modal>\n        </div>\n    }\n\n    render() {\n        return (\n            <a>\n                {this.renderModal()}\n            </a>\n        );\n    }\n}\nexport default Settings;","import React, { Component } from \"react\";\nimport Settings from './Settings'\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Button\n} from \"reactstrap\";\n\nclass NavBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n        this.state = {\n            collapsed: true\n        };\n    }\n\n    toggleNavbar() {\n        this.setState({\n            collapsed: !this.state.collapsed\n        });\n    }\n\n    renderSelectedWindow = () => {\n        const {window, appStates} = this.props;\n        const {currentWindow} = appStates;\n\n        let content = \"Window Undefined\";\n\n        switch (currentWindow) { \n            case window.MONITOR:\n                content = \"Monitor Interface\";\n                break;\n            case window.SETTINGS:\n                content = \"Settings\";\n                break;\n            default:\n                break;\n        }\n\n        return <div className=\"ml-2 mr-5 NavBarText\">{content}</div>;\n    };\n\n    renderWindowButton = (newWindowValue, displayText) => {\n        const {currentWindow } = this.props.appStates;\n        const {handleWindowChange} = this.props.appFunctions;\n\n        const isDisabled = newWindowValue === currentWindow ? \"disabled\" : \"\";\n        return <Button onClick={() => handleWindowChange(newWindowValue)} className={\"m-2 \" + isDisabled} > {displayText}</Button>\n    };\n\n    renderOptions = () => {\n        const { window, appStates, appFunctions } = this.props;\n        return (\n            <Nav navbar>\n                <NavItem>\n                    {this.renderWindowButton(window.MONITOR, \"Monitor Interface\")}\n                </NavItem>\n                <NavItem>\n                    <Settings appStates={appStates} appFunctions={appFunctions}/>\n                </NavItem>\n                <NavItem>\n                    <NavLink href=\"https://github.com/lnls-sirius/bbb-daemon\">\n                        GitHub\n                    </NavLink>\n                </NavItem>\n            </Nav>\n        );\n    };\n\n    render() {\n        const {baseUrl} = this.props.appStates;\n        return (\n            <div>\n                <Navbar className=\"navbar navbar-dark bg-dark\">\n                    <NavbarBrand href=\"/\" className=\"mr-auto\">\n                        BeagleBone Daemon\n                    </NavbarBrand>\n                    <span className='ml-2 mr-2' style={{fontSize:18, color:'white'}}>\n                        {baseUrl}\n                    </span>\n                    {this.renderSelectedWindow()}\n                    <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n                    <Collapse isOpen={!this.state.collapsed} navbar >\n                        {this.renderOptions()}\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\nexport default NavBar;\n","/* IP Network IP regex */\nexport var reIpNetworkIp = /^\\s*[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\s+[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\/[0-9]{1,2}\\s+[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3} *$/\n/* Hostname (no spaces and :) */\nexport var reHostname = /^[^\\s:]+$/\n","import React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { reHostname, reIpNetworkIp } from '../regex';\n\nclass HostnameInp extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hostname:'',\n            newHostname : '',\n            validInput: true\n        };\n    };\n\n    handleInputChange = (evt) =>{\n        this.setState({newHostname:evt.target.value, validInput:reHostname.test(evt.target.value)});\n    }\n\n    renderError = ()=>{\n        if(this.state.validInput){\n        }else{\n            return (<div className=\"alert alert-danger\">This is not a valid hostname. Please remove all spaces and :.</div>);\n        }\n    }\n\n    render(){\n        let node = this.props.node;\n        return (\n            <div className=\"form-group\">\n                <span className=\"input-group-text mt-1 mb-1\" >{'Hostname '+ node['name']}</span>\n                <input type=\"text\" className=\"form-control mt-1 mb-1\"\n                    placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon1\"\n                    value={this.state.newHostname}\n                    onChange={this.handleInputChange}\n                    />\n                    <button\n                        className=\"btn btn-outline-secondary mt-1 mb-1\" type=\"button\"\n                        onClick={()=>this.props.appFunctions.handleNewHostname(node['ip_address'], this.state.newHostname) }\n                    >Set Hostname</button>\n                    {this.renderError()}\n            </div>)\n    };\n}\nclass IpNetworkMaskInp extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            ip:'',\n            newIp : '',\n            validInput: true\n        };\n    };\n\n    handleInputChange = (evt) =>{\n        this.setState({newIp:evt.target.value, validInput:reIpNetworkIp.test(evt.target.value)});\n    }\n\n    renderError = ()=>{\n        if(this.state.validInput){\n        }else{\n            return (<div className=\"alert alert-danger\">Invalid inut. Please match the pattern IP NETWORK IP.</div>);\n        }\n    }\n\n    render(){\n        let {node, appFunctions} = this.props;\n        return (\n            <div className=\"form-group\">\n                <span className=\"input-group-text mt-1 mb-1\" >{'IP '+ node['ip_address']}</span>\n                <input\n                    value={this.state.newIp}\n                    onChange={this.handleInputChange}\n                    type=\"text\" className=\"form-control mt-1 mb-1\"\n                    placeholder=\"Ip Network Gateway\"\n                    aria-label=\"\" aria-describedby=\"basic-addon1\"/>\n                <button\n                    className=\"btn btn-outline-secondary mt-1 mb-1\"\n                    type=\"button\"\n                    onClick={() => appFunctions.handleNewIp(node['ip_address'], this.state.newIp)}\n                >Set Ip Address</button>\n                {this.renderError()}\n            </div>)\n    };\n}\n\nclass Details extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            newIp:'',\n            newIpFailure :false,\n            newHostname:''\n        }\n    }\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    handleNewIp = ()=>{\n        let success = this.props.appFunctions\n            .handleNewIp(this.props.node['ip_address'], this.state.newIp);\n        this.setState({newIpFailure:success});\n    }\n\n    renderContent = () => {\n        const node = this.props.node;\n        return (\n        <div>\n            <ModalBody>\n                <form>\n                    <HostnameInp node={this.props.node} appFunctions={this.props.appFunctions}/>\n                    <IpNetworkMaskInp node={this.props.node} appFunctions={this.props.appFunctions}/>\n                </form>\n            </ModalBody>\n        </div>)\n    }\n    renderModal = () => {\n        return (\n            <div>\n                <Button onClick={this.toggle}>Details</Button>\n                <Modal\n                    fade={false} centered isOpen={this.state.modal} size={'lg'}\n                    toggle={this.toggle} className={this.props.className}>\n                    <ModalHeader toggle={this.toggle}>\n                        Details\n                    </ModalHeader>\n                    {this.renderContent()}\n                </Modal>\n            </div>);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.renderModal()}\n            </div>\n        );\n    }\n}\nexport default Details;","import React, { Component } from 'react';\nimport { Table, Button } from 'reactstrap';\nimport Details from './Details';\n\nclass Monitor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filter: ''\n        }\n    }\n\n\n    handleFiltering = (node) => {\n        const filter = this.state.filter;\n        try{\n            var re = RegExp(filter);\n            return (\n                filter === null ||\n                filter === '' ||\n                re.test(node.ip_address) ||\n                re.test(node.name) ||\n                re.test(node.details) ||\n                re.test(node.state_string) ||\n                re.test(node.config_time)\n            )\n        }catch(ex){\n            return true;\n        }\n    }\n\n    renderTableRows = (nodes) => {\n        let rows = nodes\n            .map(function (node, i) {\n                return (\n                    <tr key={i}>\n                        <td>{node['ip_address']}</td>\n                        <td>{node['name']}</td>\n                        <td>{node['details']}</td>\n                        <td>{node['state_string']}</td>\n                        <td>{node['config_time']}</td>\n                        <td>\n                            <Button\n                                className=\"btn btn-danger\"\n                                onClick={() => this.props.appFunctions.handleReboot(node['ip_address'])}>\n                                Reboot\n                        </Button>\n                        </td>\n                        <td>\n                            <Details node={node}\n                            appFunctions={this.props.appFunctions}\n                            />\n                        </td>\n                    </tr>\n                )\n            }, this);\n        return rows;\n    };\n\n    renderTable = (tableHeaderClass, nodes) => {\n        return (<div>\n            <Table hover responsive>\n                <thead>\n                    <tr className={tableHeaderClass}>\n                        <th>IP</th>\n                        <th>Hostname</th>\n                        <th>Details</th>\n                        <th>State</th>\n                        <th>Config Time</th>\n                        <th></th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderTableRows(nodes)}\n                </tbody>\n            </Table>\n        </div>\n        );\n    };\n\n    renderOfflineWarning = () => {\n        const { online } = this.props.appStates;\n        if (!online)\n            return <span className=\"m-2 badge badge-danger\">Server Offline</span>\n    }\n\n    renderTablePainel = (tableName, filter, nodes, filteredNodes) => {\n        return <div>\n            {tableName}\n            <input\n                className=\"m-2\"\n                type=\"text\"\n                placeholder=\"Search Node\"\n                value={filter}\n                onChange={e => this.setState({ filter: e.target.value })} />\n            <a style={{ fontSize: 20 }}>\n                {this.renderOfflineWarning()}\n                <span className=\"m-2 badge badge-success\">Detected Nodes {nodes.length}</span>\n                <span className=\"m-2 badge badge-secondary\">Displayed Nodes {filteredNodes.length}</span>\n            </a>\n        </div>\n\n    };\n\n    render() {\n        const { filter, nodes } = this.props.appStates;\n        const filteredNodes = nodes.filter(this.handleFiltering);\n        let tableName = \"Connected Nodes\";\n        let tableHeaderClass = \"m-2 bg-primary text-white\";\n        return (\n            <div>\n                <div className=\"m-2\">\n                    {this.renderTablePainel(tableName, filter, nodes, filteredNodes)}\n                    {this.renderTable(tableHeaderClass, filteredNodes)}\n                </div>\n            </div>\n        );\n    };\n}\nexport default Monitor;","import axios from 'axios';\n\nfunction fDefault(res) {\n    console.log(res);\n}\n\nexport function postNodeIpNetworkGateway(url, ip, ip_new, ip_network, ip_gateway, fThen, fCatch){\n    if (fThen == null)\n        fThen = fDefault;\n    if (fCatch == null)\n        fCatch = fDefault\n\n    axios.post(url + '/node/ip', {ip:ip, ip_new:ip_new, ip_network:ip_network, ip_gateway:ip_gateway})\n        .then(fThen)\n        .catch(fCatch);\n}\n\nexport function postNodeNameservers(url, ip, nameservers, fThen, fCatch){\n    if (fThen == null)\n        fThen = fDefault;\n    if (fCatch == null)\n        fCatch = fDefault\n\n    axios.post(url + '/node/nameservers', {ip:ip, nameservers:nameservers})\n        .then(fThen)\n        .catch(fCatch);\n}\n\nexport function postNodeHostname(url, ip, hostname, fThen, fCatch) {\n    if (fThen == null)\n        fThen = fDefault;\n    if (fCatch == null)\n        fCatch = fDefault\n\n    axios.post(url + '/node/hostname', {ip: ip, hostname: hostname})\n        .then(fThen)\n        .catch(fCatch);\n}\n\nexport function postNodeReboot(url, ip, fThen, fCatch) {\n    if (fThen == null)\n        fThen = fDefault;\n    if (fCatch == null)\n        fCatch = fDefault\n\n    axios.post(url + '/node/reboot', {ip: ip})\n        .then(fThen)\n        .catch(fCatch);\n}\n\nexport function getNodesAll(url, fThen, fCatch) {\n    if (fThen == null)\n        fThen = fDefault;\n    if (fCatch == null)\n        fCatch = fDefault\n\n    /* nodes/all can also be used as url*/\n    axios.get(url + '/nodes')\n        .then(fThen)\n        .catch(fCatch);\n}\n\nexport function getNodesMissing(url, fThen, fCatch){\n    if (fThen == null)\n        fThen = fDefault;\n    if (fCatch == null)\n        fCatch = fDefault\n\n    axios.get(url + '/nodes/missing')\n        .then(fThen)\n        .catch(fCatch);\n}\n\nexport function getNodesExpected(url, fThen, fCatch){\n    if (fThen == null)\n        fThen = fDefault;\n    if (fCatch == null)\n        fCatch = fDefault\n\n    axios.get(url + '/nodes/expected')\n        .then(fThen)\n        .catch(fCatch);\n}","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport Monitor from \"./components/Monitor\";\n\nimport { reIpNetworkIp, reHostname } from './regex';\nimport { getNodesAll, postNodeReboot, postNodeIpNetworkGateway, postNodeHostname } from './api/node';\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.window = {\n            VALID_NUMS: [0, 1],\n            MONITOR: 0,\n            SETTINGS: 1\n        };\n        this.state = {\n            currentWindow: this.window.MONITOR,\n            baseUrl: 'https://10.0.38.42/bbb-daemon/api',\n            refreshInterval: 2000,\n            showSettings: false,\n            nodes: [],\n            online: false\n        };\n    }\n\n    componentDidMount() {\n        const { refreshInterval } = this.state;\n        this.loadData(this);\n        this.intervalId = setInterval(this.loadData, refreshInterval, this);\n    }\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n\n    loadData = async (app) => {\n        // Make a request\n        getNodesAll(app.state.baseUrl,\n            (response) =>\n                app.setState({\n                    nodes: response.data,\n                    online: true\n                })\n            , (response) => app.setState({ online: false }));\n    }\n\n    handleWindowChange = (newWindow) => {\n        if (this.window.VALID_NUMS.includes(newWindow)\n            && this.currentWindow !== newWindow) {\n            this.setState({ currentWindow: newWindow })\n        }\n    };\n\n    /** Handle calls to configure a node's hostname. */\n    handleNewHostname = (ip, hostname) =>{\n        hostname = hostname.trim();\n        if(reHostname.test(hostname)){\n            console.log('New hostname', hostname);\n            postNodeHostname(this.props.baseUrl, ip, hostname);\n            return true;\n        }else{\n            console.log('Does not match the pattern.');\n            return false;\n        }\n    }\n\n    /** Handle calls to configure a node's network. */\n    handleNewIp = (ip, new_ip_string, fThen, fCatch) =>{\n        // Tries to match the ip net_ip/mask ip pattern\n        if(reIpNetworkIp.test(new_ip_string)){\n            // ip_new, ip_network, ip_gateway\n            let aux = new_ip_string.split(\" \");\n            console.log('New network config', aux);\n            postNodeIpNetworkGateway(this.props.baseUrl, ip, aux[0].trim(), aux[1].trim(), aux[2].trim())\n            return true;\n        }else{\n            console.log('Does not match the pattern.');\n            return false;\n        }\n    };\n\n    handleReboot = (ip) => {\n        postNodeReboot(this.props.baseUrl, ip);\n    }\n\n    handleUpdateUrl = (newBaseUrl) => {\n        this.setState({\n            baseUrl: newBaseUrl\n        });\n    }\n\n    handleDisplaySettings = () => {\n        this.setState((prevState, props) => {\n            return { showSettings: !(prevState.showSettings === true) };\n        });\n    }\n\n    renderWindow = (currentWindow) => {\n        switch (currentWindow) {\n            case this.window.MONITOR:\n                return <Monitor\n                    appStates={this.state}\n                    appProps={this.props}\n                    appFunctions={{\n                        handleNewHostname: this.handleNewHostname,\n                        handleNewIp: this.handleNewIp,\n                        handleUpdateUrl: this.handleUpdateUrl,\n                        handleDisplaySettings: this.handleDisplaySettings,\n                        handleWindowChange: this.handleWindowChange,\n                        handleReboot: this.handleReboot\n                    }} />;\n            default:\n                return <div className=\"m2\">Incorrect Window Value</div>;\n        }\n    };\n\n    handleReboot = (ip) => {\n        postNodeReboot(this.state.baseUrl, ip);\n    }\n\n    render() {\n        const { currentWindow } = this.state;\n        return (\n            <div>\n                <div className=\"App\">\n                    <NavBar\n                        appStates={this.state}\n                        appProps={this.props}\n                        appFunctions={{\n                            handleUpdateUrl: this.handleUpdateUrl,\n                            handleDisplaySettings: this.handleDisplaySettings,\n                            handleWindowChange: this.handleWindowChange\n                        }}\n                        window={this.window} />\n                    <div className=\"AppBody\">\n                        {this.renderWindow(currentWindow)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}